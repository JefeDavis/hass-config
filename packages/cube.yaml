automation:
  # - id: '1669614969925'
  #   alias: Office Cube
  #   description: ''
  #   use_blueprint:
  #     path: SirGoodenough/Zigbee2MQTT - Xiaomi Cube Controller.yaml
  #     input:
  #       remote: sensor.magic_cube_action
  #       doubletap_face_0:
  #         - service: media_player.media_play_pause
  #           data: {}
  #           target:
  #             entity_id: media_player.mass_office
  #       rotate_cw_face_0:
  #         - service: script.cube_volume_control
  #           data:
  #             angle: "{{ trigger.to_state.attributes.action_angle }}"
  #             media_player: media_player.mass_office
  #       rotate_ccw_face_0:
  #         - service: script.cube_volume_control
  #           data:
  #             angle: "{{ trigger.to_state.attributes.action_angle }}"
  #             media_player: media_player.mass_office
  #       slide_face_0:
  #         - service: media_player.media_next_track
  #           data: {}
  #           target:
  #             entity_id: media_player.mass_office
  #       doubletap_face_1:
  #         - service: media_player.media_play_pause
  #           data: {}
  #           target:
  #             entity_id: media_player.mass_sara_s_office
  #       rotate_cw_face_1:
  #         - service: script.cube_volume_control
  #           data:
  #             angle: "{{ trigger.to_state.attributes.action_angle }}"
  #             media_player: media_player.mass_sara_s_office
  #       rotate_ccw_face_1:
  #         - service: script.cube_volume_control
  #           data:
  #             angle: "{{ trigger.to_state.attributes.action_angle }}"
  #             media_player: media_player.mass_sara_s_office
  #       slide_face_1:
  #         - service: media_player.media_next_track
  #           data: {}
  #           target:
  #             entity_id: media_player.mass_sara_s_office
  #       doubletap_face_3:
  #         - service: light.toggle
  #           data: {}
  #           target:
  #             entity_id: light.office_lamp
  #       rotate_cw_face_3:
  #         - service: script.cube_dimmer_control
  #           data:
  #             angle: "{{ trigger.to_state.attributes.action_angle }}"
  #             light: light.office_lamp
  #       rotate_ccw_face_3:
  #         - service: script.cube_dimmer_control
  #           data:
  #             angle: "{{ trigger.to_state.attributes.action_angle }}"
  #             light: light.office_lamp
  #       rotate_cw_face_2:
  #         - service: script.cube_red_color_control
  #           data:
  #             angle: "{{ trigger.to_state.attributes.action_angle }}"
  #             light: light.office_lamp
  #       rotate_ccw_face_2:
  #         - service: script.cube_red_color_control
  #           data:
  #             angle: "{{ trigger.to_state.attributes.action_angle }}"
  #             light: light.office_lamp
  #       rotate_cw_face_4:
  #         - service: script.cube_green_color_control
  #           data:
  #             angle: "{{ trigger.to_state.attributes.action_angle }}"
  #             light: light.office_lamp
  #       rotate_ccw_face_4:
  #         - service: script.cube_green_color_control
  #           data:
  #             angle: "{{ trigger.to_state.attributes.action_angle }}"
  #             light: light.office_lamp
  #       rotate_cw_face_5:
  #         - service: script.cube_blue_color_control
  #           data:
  #             angle: "{{ trigger.to_state.attributes.action_angle }}"
  #             light: light.office_lamp
  #       rotate_ccw_face_5:
  #         - service: script.cube_blue_color_control
  #           data:
  #             angle: "{{ trigger.to_state.attributes.action_angle }}"
  #             light: light.office_lamp


  - id: 2e521ce8-5559-4cd3-b671-be69715ed345
    alias: Office Cube
    trigger:
       # tap
      - platform: state
        entity_id: sensor.office_cube_action
        to: tap
        id: tap
      
      # angle
      - platform: state
        entity_id: sensor.office_cube_action_angle
        id: angle
      
      # push
      - platform: state
        entity_id: sensor.office_cube_action
        to: slide
        id: slide
    action:
      - choose:

        #############
        # Speaker #
        #############

        # tap on side 0 plays/pauses speaker
        - conditions:
          - condition: state
            entity_id: sensor.office_cube_side
            state: '0'
          - condition: trigger
            id: tap
          sequence:
          - service: media_player.media_play_pause
            target:
              entity_id: media_player.mass_office
            data: {}

        # slide on side 0 to advance to the next track
        - conditions:
          - condition: state
            entity_id: sensor.office_cube_side
            state: '0'
          - condition: trigger
            id: slide
          sequence:
          - service: media_player.media_next_track
            target:
              entity_id: media_player.mass_office
            data: {}
        
        # slide on rotate cw/ccw 0 to advance to adjust volume
        - conditions:
          - condition: state
            entity_id: sensor.office_cube_side
            state: '0'
          - condition: trigger
            id: angle
          sequence:
          - service: script.cube_volume_control
            data:
              angle: "{{ trigger.to_state.state }}"
              media_player: media_player.mass_office
      
        #############
        # Lamp #
        #############

        # tap on side 3 turns office lamp on/off
        - conditions:
          - condition: state
            entity_id: sensor.office_cube_side
            state: '3'
          - condition: trigger
            id: tap
          sequence:
          - service: light.toggle
            target:
              entity_id: light.office_lamp
            data: {}
        
        # slide on rotate cw/ccw 0 to advance to adjust volume
        - conditions:
          - condition: state
            entity_id: sensor.office_cube_side
            state: '3'
          - condition: trigger
            id: angle
          sequence:
          - service: script.cube_dimmer_control
            data:
              angle: "{{ trigger.to_state.state }}"
              light: light.office_lamp
        
      
script:
  cube_dimmer_control:
    description: Template Dimmer Control
    variables:
      angle:
      light:
    sequence:
      - service: light.turn_on
        data:
          entity_id: "{{ light }}"
          brightness_pct: >
            {% set step_size = angle * 0.2 %}
              {# Get brightness as a percent. #}
            {% set cb = (state_attr( light, 'brightness') | float(10) / 255.0) * 100.0 %}
            {% set new_brightness = cb | int(10) + step_size %}
            {% if new_brightness < 5 %}
              {# If it gets really low set to 0. Adjust if needed for your lights. #}
              0
            {% elif new_brightness <= 10 %}
              {# If it's not quite 0, set to a minimum working brightness. #}
              10
            {% elif 91 <= new_brightness < (90 + step_size) %}
              {# If it's almost full brightness, set to 100%. #}
              100
            {% else %}
              {# Send actual calculated value. #}
              {{ new_brightness }}
            {% endif %}

  cube_volume_control:
    description: Template Volume Control
    variables:
      angle:
      media_player:
    sequence:
      - service: media_player.volume_set
        data:
          entity_id: "{{ media_player }}"
          volume_level: >
            {% set step_size = (angle | float ) * 0.05 %}
            {# Get Volume as a percent. #}
            {% set vol = (state_attr( media_player, 'volume_level') | float(10)) * 100.00 %}
            {% set new_volume = vol | int(10) + step_size %}
            {# Send actual calculated value. #}
            {% if new_volume <= 0.00 %}
              0.00
            {% elif new_volume >= 100 %}
              1.00
            {% else %}
              {{ new_volume / 100}}
            {% endif %}

  cube_red_color_control:
    description: Control the green part of the color
    variables:
      light:
      angle:
    sequence:
      - service: light.turn_on
        data:
          entity_id: "{{ light }}"
          rgb_color: >
            {% set step_size = (angle | default(0) | float(0)) * 0.6 %}
            {% set color = state_attr(light, 'rgb_color') %}
            {% set R = color[0] %}
            {% set G = color[1] %}
            {% set B = color[2] %}
            {% set new_red = R + step_size | int(0) %}
            {% if new_red < 0 %}
              {# Make sure it doesn't go negative #}
              {{ 0, G, B }}
            {% elif new_red > 255 %}
              {# Make sure it doesn't go over 255 #}
              {{ 255, G, B }}
            {% else %}
              {# Send the value calculated #}
              {{ new_red, G, B }}
            {% endif %}

  cube_green_color_control:
    description: Control the green part of the color
    variables:
      light:
      angle:
    sequence:
      - service: light.turn_on
        data:
          entity_id: "{{ light }}"
          rgb_color: >
            {% set step_size = (angle | default(0) | float(0)) * 0.6 %}
            {% set color = state_attr(light, 'rgb_color') %}
            {% set R = color[0] %}
            {% set G = color[1] %}
            {% set B = color[2] %}
            {% set new_green = G + step_size | int(0) %}
            {% if new_green < 0 %}
              {# Make sure it doesn't go negative #}
              {{ R, 0, B }}
            {% elif new_green > 255 %}
              {# Make sure it doesn't go over 255 #}
              {{ R, 255, B }}
            {% else %}
              {# Send the value calculated #}
              {{ R, new_green, B }}
            {% endif %}

  cube_blue_color_control:
    description: Control the green part of the color
    variables:
      light:
      angle:
    sequence:
      - service: light.turn_on
        data:
          entity_id: "{{ light }}"
          rgb_color: >
            {% set step_size = (angle | default(0) | float(0)) * 0.6 %}
            {% set color = state_attr(light, 'rgb_color') %}
            {% set R = color[0] %}
            {% set G = color[1] %}
            {% set B = color[2] %}
            {% set new_blue = B + step_size | int(0) %}
            {% if new_blue < 0 %}
              {# Make sure it doesn't go negative #}
              {{ R, G, 0 }}
            {% elif new_green > 255 %}
              {# Make sure it doesn't go over 255 #}
              {{ R, G, 255 }}
            {% else %}
              {# Send the value calculated #}
              {{ R, G, new_blue }}
            {% endif %}
